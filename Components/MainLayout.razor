@inherits LayoutComponentBase
@namespace AlovaChat.Components
@using Microsoft.JSInterop
@using AlovaChat.Models
@using AlovaChat.Services
@inject IChatSessionService SessionService
@inject ISessionEventService EventService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IAsyncDisposable

<div class="page">
    <div class="sidebar">
        <nav class="nav-menu">
            <div class="nav-header">
                <button class="btn btn-primary new-chat-btn" @onclick="CreateNewChat" disabled="@isCreatingSession">
                    @if (isCreatingSession)
                    {
                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                    }
                    else
                    {
                        <i class="fas fa-plus me-2"></i>
                    }
                    New Chat
                </button>
            </div>
            <div class="nav-scrollable">
                <div class="session-list">
                    @if (isLoadingSessions)
                    {
                        <div class="loading-sessions">
                            <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                            Loading sessions...
                        </div>
                    }
                    else if (!sessions.Any())
                    {
                        <div class="no-sessions">
                            <i class="fas fa-comments fa-2x mb-3"></i>
                            <p>No chat sessions yet.<br />Start a new conversation!</p>
                        </div>
                    }
                    else
                    {
                        @foreach (var session in sessions)
                        {
                            <div class="session-item @(session.Id == currentSessionId ? "active" : "")"
                                 @onclick="() => SelectSession(session.Id)">
                                <div class="session-content">
                                    <div class="session-title">@(string.IsNullOrWhiteSpace(session.Title) ? "New Chat" : session.Title)</div>
                                    <div class="session-meta">
                                        <small class="text-muted">@session.LastActivity.ToString("MMM dd, HH:mm")</small>
                                    </div>
                                </div>
                                <div class="session-actions">
                                    <button class="btn btn-outline-danger btn-sm"
                                            @onclick="() => DeleteSession(session.Id)"
                                            @onclick:stopPropagation="true"
                                            disabled="@isDeletingSession"
                                            title="Delete chat">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                </div>
                            </div>
                        }
                    }
                </div>
            </div>
        </nav>
    </div>

    <main>
        <div class="top-row">
            <div class="navbar-brand">
                <i class="fas fa-robot me-2"></i>AlovaChat
            </div>
            <div class="model-status">
                <div id="status-indicator" class="status-indicator ready"></div>
                <span id="status-text">AI Ready</span>
            </div>
        </div>

        <article class="content">
            @Body
        </article>
    </main>
</div>

@code {
    private List<ChatSession> sessions = new();
    private bool isLoadingSessions = false;
    private bool isCreatingSession = false;
    private bool isDeletingSession = false;
    private string? currentSessionId;
    private string? currentUserId;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Get current session from URL
                currentSessionId = await JSRuntime.InvokeAsync<string>("getSessionFromUrl");

                // Get or create user ID
                currentUserId = await JSRuntime.InvokeAsync<string>("getUserId");

                await LoadUserSessions();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error initializing MainLayout: {ex.Message}");
            }
        }
    }

    private async Task LoadUserSessions()
    {
        if (string.IsNullOrEmpty(currentUserId))
            return;

        try
        {
            isLoadingSessions = true;
            await InvokeAsync(StateHasChanged);

            sessions = await SessionService.GetUserSessionsAsync(currentUserId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading sessions: {ex.Message}");
        }
        finally
        {
            isLoadingSessions = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task CreateNewChat()
    {
        if (string.IsNullOrEmpty(currentUserId) || isCreatingSession)
            return;

        try
        {
            isCreatingSession = true;
            await InvokeAsync(StateHasChanged);

            var session = await SessionService.CreateSessionAsync(currentUserId);

            // Add to sessions list
            sessions.Insert(0, session);
            currentSessionId = session.Id;

            // Navigate to the new session
            Navigation.NavigateTo($"/?session={session.Id}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error creating new chat: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error creating new chat: {ex.Message}");
        }
        finally
        {
            isCreatingSession = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private void SelectSession(string sessionId)
    {
        if (sessionId == currentSessionId)
            return;

        currentSessionId = sessionId;
        Navigation.NavigateTo($"/?session={sessionId}");
    }

    private async Task DeleteSession(string sessionId)
    {
        if (isDeletingSession)
            return;

        try
        {
            // Confirm deletion
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this chat session? This action cannot be undone.");
            if (!confirmed)
                return;

            isDeletingSession = true;
            await InvokeAsync(StateHasChanged);

            await SessionService.DeleteSessionAsync(sessionId);

            // Remove from sessions list
            sessions = sessions.Where(s => s.Id != sessionId).ToList();

            // If current session was deleted, navigate to home or first session
            if (currentSessionId == sessionId)
            {
                if (sessions.Any())
                {
                    var firstSession = sessions.First();
                    Navigation.NavigateTo($"/?session={firstSession.Id}");
                }
                else
                {
                    Navigation.NavigateTo("/");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting session: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", $"Error deleting session: {ex.Message}");
        }
        finally
        {
            isDeletingSession = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    // Listen for navigation changes to update current session
    protected override void OnInitialized()
    {
        Navigation.LocationChanged += OnLocationChanged;

        // Subscribe to session events
        EventService.SessionCreated += OnSessionCreated;
        EventService.SessionUpdated += OnSessionUpdated;
        EventService.SessionDeleted += OnSessionDeleted;
    }

    private async void OnLocationChanged(object? sender, Microsoft.AspNetCore.Components.Routing.LocationChangedEventArgs e)
    {
        var uri = new Uri(e.Location);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);

        var newSessionId = query.TryGetValue("session", out var sessionValues)
            ? sessionValues.FirstOrDefault()
            : null;

        if (newSessionId != currentSessionId)
        {
            currentSessionId = newSessionId;
            await InvokeAsync(StateHasChanged);
        }
    }

    // Event handlers for session changes from other components
    private async void OnSessionCreated(string sessionId)
    {
        await InvokeAsync(async () =>
        {
            await LoadUserSessions();
        });
    }

    private async void OnSessionUpdated(string sessionId)
    {
        await InvokeAsync(async () =>
        {
            await LoadUserSessions();
        });
    }

    private async void OnSessionDeleted(string sessionId)
    {
        await InvokeAsync(() =>
        {
            // Remove from local list
            sessions = sessions.Where(s => s.Id != sessionId).ToList();
            StateHasChanged();
        });
    }

    public ValueTask DisposeAsync()
    {
        Navigation.LocationChanged -= OnLocationChanged;

        // Unsubscribe from session events
        EventService.SessionCreated -= OnSessionCreated;
        EventService.SessionUpdated -= OnSessionUpdated;
        EventService.SessionDeleted -= OnSessionDeleted;

        return ValueTask.CompletedTask;
    }
}