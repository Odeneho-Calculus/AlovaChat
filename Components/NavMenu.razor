@inject ISessionService SessionService
@inject IJSRuntime JSRuntime
@inject NavigationManager Navigation
@implements IDisposable

<div class="nav-menu">
    <div class="nav-header">
        <button class="btn btn-primary new-chat-btn" @onclick="StartNewChat">
            <i class="fas fa-plus me-2"></i>
            New Chat
        </button>
    </div>

    <div class="nav-scrollable">
        @if (sessions != null && sessions.Any())
        {
            <div class="session-list">
                @foreach (var session in sessions)
                {
                    <div class="session-item @(session.Id == currentSessionId ? "active" : "")"
                         @onclick="() => SelectSession(session.Id)">
                        <div class="session-content">
                            <div class="session-title">@session.Title</div>
                            <div class="session-meta">
                                <small class="text-muted">
                                    @session.MessageCount messages â€¢ @FormatDate(session.LastActivity)
                                </small>
                            </div>
                        </div>
                        <div class="session-actions">
                            <button class="btn btn-sm btn-outline-danger"
                                    @onclick:stopPropagation="true"
                                    @onclick="() => DeleteSession(session.Id)">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else if (isLoading)
        {
            <div class="loading-sessions">
                <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                Loading sessions...
            </div>
        }
        else
        {
            <div class="no-sessions">
                <i class="fas fa-comments fa-2x mb-3"></i>
                <p>No chat sessions yet</p>
                <p class="text-muted">Start a new conversation!</p>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public string? CurrentSessionId { get; set; }
    [Parameter] public EventCallback<string> OnSessionSelected { get; set; }
    [Parameter] public EventCallback OnNewChatRequested { get; set; }

    private List<ChatSessionDto>? sessions;
    private string? currentSessionId;
    private bool isLoading = true;
    private Timer? refreshTimer;

    protected override async Task OnInitializedAsync()
    {
        await LoadSessions();

        // Set up periodic refresh
        refreshTimer = new Timer(async _ => await InvokeAsync(LoadSessions), null,
            TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
    }

    protected override async Task OnParametersSetAsync()
    {
        if (currentSessionId != CurrentSessionId)
        {
            currentSessionId = CurrentSessionId;
            StateHasChanged();
        }
    }

    private async Task LoadSessions()
    {
        try
        {
            var userId = await JSRuntime.InvokeAsync<string>("getUserId");
            if (!string.IsNullOrEmpty(userId))
            {
                sessions = await SessionService.GetUserSessionsAsync(userId);
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading sessions: {ex.Message}");
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task StartNewChat()
    {
        await OnNewChatRequested.InvokeAsync();
    }

    private async Task SelectSession(string sessionId)
    {
        currentSessionId = sessionId;
        await OnSessionSelected.InvokeAsync(sessionId);
    }

    private async Task DeleteSession(string sessionId)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this chat session?"))
        {
            try
            {
                await SessionService.DeleteSessionAsync(sessionId);
                await LoadSessions();

                if (sessionId == currentSessionId)
                {
                    await StartNewChat();
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error deleting session: {ex.Message}");
            }
        }
    }

    private string FormatDate(DateTime date)
    {
        var now = DateTime.UtcNow;
        var diff = now - date;

        if (diff.TotalMinutes < 1)
            return "Just now";
        if (diff.TotalMinutes < 60)
            return $"{(int)diff.TotalMinutes}m ago";
        if (diff.TotalHours < 24)
            return $"{(int)diff.TotalHours}h ago";
        if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays}d ago";

        return date.ToString("MMM dd");
    }

    public void Dispose()
    {
        refreshTimer?.Dispose();
    }
}